import telebot
import httpx
import json
import os
import regex as re
from datetime import datetime, timedelta

GROQ_API_KEY = "–í–∞—à_GROQ_API_–ö–õ–Æ–ß"
TELEGRAM_BOT_TOKEN = "–í–∞—à_Telegram_–¢–æ–∫–µ–Ω"
GROQ_MODEL = "llama3-70b-8192"

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)
DIALOG_FILE = "dialog.dll"
STATE_FILE = "states.json"

CREATION_DATETIME = datetime(2025, 5, 9, 16, 30)

def load_json(filename):
    return json.load(open(filename, "r", encoding="utf-8")) if os.path.exists(filename) else {}

def save_json(filename, data):
    with open(filename, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def match_any(text, patterns):
    return any(re.search(p, text, re.IGNORECASE) for p in patterns)

def get_age_str():
    delta = datetime.now() - CREATION_DATETIME
    days = delta.days
    seconds = delta.seconds
    hours = seconds // 3600
    minutes = (seconds % 3600) // 60
    secs = seconds % 60
    years = days // 365
    return f"–ú–Ω–µ {years} –ª–µ—Ç, {days} –¥–Ω–µ–π, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç –∏ {secs} —Å–µ–∫—É–Ω–¥."

def get_creation_date():
    return "–Ø –±—ã–ª —Å–æ–∑–¥–∞–Ω 9 –º–∞—è 2025 –≥–æ–¥–∞ –≤ 16:30."

def ask_groq(chat_id, user_message, histories):
    if str(chat_id) not in histories:
        histories[str(chat_id)] = []

    history = histories[str(chat_id)]
    history.append({"role": "user", "content": user_message})

    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": GROQ_MODEL,
        "messages": history,
        "temperature": 0.7
    }

    try:
        response = httpx.post(url, headers=headers, json=data, timeout=30)
        result = response.json()
        if "choices" in result:
            ai_reply = result["choices"][0]["message"]["content"]
            history.append({"role": "assistant", "content": ai_reply})
            save_json(DIALOG_FILE, histories)
            return ai_reply
        elif "error" in result:
            return f"–û—à–∏–±–∫–∞ –æ—Ç Groq: {result['error']['message']}"
        else:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç Groq API."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Groq API: {e}"

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –ü–æ–º–æ—â–Ω–∏–∫ LongTime. –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")

@bot.message_handler(commands=['longtime'])
def longtime_info(message):
    bot.send_message(message.chat.id, "–°–µ—Ä–≤–µ—Ä Minecraft LongTime:\n- IP: mc.long-time.ru\n- –°–∞–π—Ç: https://www.long-time.ru")

@bot.message_handler(func=lambda msg: 'longtime' in msg.text.lower())
def react_longtime(message):
    bot.send_message(message.chat.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä LongTime:\n- IP: mc.long-time.ru\n- –°–∞–π—Ç: https://www.long-time.ru")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = str(message.chat.id)
    text = message.text.strip()
    histories = load_json(DIALOG_FILE)
    states = load_json(STATE_FILE)

    if chat_id in states and states[chat_id].get("silence"):
        if match_any(text, [r"–ª–∞–¥–Ω–æ.*–æ—Ç–≤–µ—á–∞–π", r"–º–æ–∂–µ—à—å.*–≥–æ–≤–æ—Ä–∏—Ç—å", r"–≤—Å—ë.*–º–æ–∂–Ω–æ"]):
            states[chat_id]["silence"] = False
            save_json(STATE_FILE, states)
            bot.send_message(message.chat.id, "–û–∫–µ–π, —Å–Ω–æ–≤–∞ –æ—Ç–≤–µ—á–∞—é.")
        return

    if match_any(text, [r"–Ω–µ –æ—Ç–≤–µ—á–∞–π", r"–º–æ–ª—á–∏", r"–∑–∞—Ç–∫–Ω–∏—Å—å"]):
        states.setdefault(chat_id, {})["silence"] = True
        save_json(STATE_FILE, states)
        bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, –º–æ–ª—á—É. –ù–∞–ø–∏—à–∏, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –≥–æ–≤–æ—Ä–∏—Ç—å.")
        return

    if match_any(text, [r"–∑–∞–±—É–¥—å", r"—É–¥–∞–ª–∏.*–∏—Å—Ç–æ—Ä–∏—é", r"–Ω–∞—á–Ω–∏.*–ª–∏—Å—Ç", r"—Å—Ç–µ—Ä–µ—Ç—å.*–≤—Å—ë", r"—Å—Ç–µ—Ä.*–ø–∞–º—è"]):
        if chat_id in histories:
            del histories[chat_id]
            save_json(DIALOG_FILE, histories)
            bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
        else:
            bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.")
        return

    if match_any(text, [r"–∏–≥–Ω–æ—Ä–∏—Ä—É–π.*—Ç–æ—á–∫", r"–∏–≥–Ω–æ—Ä–∏—Ä—É–π.*–∑–Ω–∞–∫", r"–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.*[.!?]", r"–±–µ–∑.*—Ç–æ—á–∫"]):
        states.setdefault(chat_id, {})["ignore_punct"] = True
        save_json(STATE_FILE, states)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –Ω–µ —Ç—Ä–µ–±—É—é —Ç–æ—á–µ–∫, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–π –≤ –∫–æ–Ω—Ü–µ.")
        return

    if match_any(text, [r"–ø—Ä–æ–≤–µ—Ä—è–π.*—Ç–æ—á–∫", r"–æ–±—Ä–∞—Ç–Ω–æ.*—Ç–æ—á–∫", r"—Å–Ω–æ–≤–∞.*—Ç–æ—á–∫", r"–≤–∫–ª—é—á–∏.*–ø—Ä–æ–≤–µ—Ä–∫—É"]):
        states.setdefault(chat_id, {})["ignore_punct"] = False
        save_json(STATE_FILE, states)
        bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º—ã—Å–ª–∏ (—Ç–æ—á–∫–∞, –≤–æ–ø—Ä–æ—Å, –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ).")
        return

    # ----- –û–ë–†–ê–ë–û–¢–ö–ê –°–ü–ï–¶–ò–ê–õ–¨–ù–´–• –í–û–ü–†–û–°–û–í -----
    if match_any(text, [r"–∫—Ç–æ.*—Å–æ–∑–¥–∞—Ç–µ–ª—å", r"–∫–µ–º.*—Å–æ–∑–¥–∞–Ω", r"–∫—Ç–æ.*—Ç–µ–±—è.*–¥–µ–ª–∞–ª", r"—Å–æ–∑–¥–∞–ª.*—Ç–µ–±—è"]):
        bot.send_message(message.chat.id, "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å ‚Äî @lghelper –≤ —Ç–≥, –∞ –∫–æ–º–ø–∞–Ω–∏—è ‚Äî OUBStudios.")
        return

    if match_any(text, [r"–∫–æ–≥–¥–∞.*—Å–æ–∑–¥–∞–Ω", r"–¥–∞—Ç–∞.*—Å–æ–∑–¥–∞–Ω", r"–¥–µ–Ω—å.*—Å–æ–∑–¥–∞–Ω", r"—Å –∫–∞–∫–æ–≥–æ.*–≤—Ä–µ–º–µ–Ω–∏", r"—Å –∫–∞–∫–æ–≥–æ.*–≥–æ–¥–∞"]):
        bot.send_message(message.chat.id, get_creation_date())
        return

    if match_any(text, [r"—Å–∫–æ–ª—å–∫–æ.*–ª–µ—Ç", r"—Å–∫–æ–ª—å–∫–æ.*–¥–Ω–µ–π", r"—Å–∫–æ–ª—å–∫–æ.*–≤—Ä–µ–º–µ–Ω–∏", r"–≤–æ–∑—Ä–∞—Å—Ç", r"–∫–æ–≥–¥–∞.*—Ç–µ–±–µ.*–¥–µ–Ω—å.*—Ä–æ–∂–¥"]):
        bot.send_message(message.chat.id, get_age_str())
        return

    if match_any(text, [r"–∫–∞–∫ –¥–µ–ª–∞", r"–∫–∞–∫ —Ç—ã", r"—á—Ç–æ –Ω–æ–≤–æ–≥–æ"]):
        bot.send_message(message.chat.id, "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ª–∏—á–Ω–æ! ü§ó")
        return

    if match_any(text, [r"–ø—Ä–∏–≤–µ—Ç", r"–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π", r"–π–æ—É", r"hello"]):
        bot.send_message(message.chat.id, "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
        return

    if match_any(text, [r"–≥–¥–µ.*–º—ã", r"–≥–¥–µ.*–æ–±—â–∞–µ–º—Å—è", r"–≤ –∫–∞–∫–æ–º.*–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", r"—ç—Ç–æ.*—Ç–µ–ª–µ–≥—Ä–∞–º", r"—Å–∞–π—Ç.*–∏–ª–∏.*—Ç–≥"]):
        bot.send_message(message.chat.id, "–ú—ã —Å–µ–π—á–∞—Å –æ–±—â–∞–µ–º—Å—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ Telegram!")
        return

    ignore_punct = states.get(chat_id, {}).get("ignore_punct", False)
    ends_with_emoji = bool(re.search(r"\p{Emoji}+$", text))
    ends_with_punct = bool(re.search(r"[.!?]$", text))

    if not ends_with_punct and not ignore_punct and not ends_with_emoji:
        bot.send_message(message.chat.id, "–ñ–¥—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–≤–æ–µ–π –º—ã—Å–ª–∏ (—Ç–æ—á–∫–∞, –≤–æ–ø—Ä–æ—Å, –≤–æ—Å–∫–ª–∏—Ü–∞–Ω–∏–µ)...\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ '–∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç–æ—á–∫–∏'.")
        return

    reply = ask_groq(chat_id, text, histories)
    bot.send_message(message.chat.id, reply)

# ---------- –ó–ê–ü–£–°–ö ----------

print("–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–π webhook...")
bot.remove_webhook()
print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
bot.polling()